swagger: '2.0'
info:
  description: >-
    Welcome to OneMap API documentation.
  version: 1.0.0
  title: Onemap 2.0 API 
  termsOfService: 'https://www.onemap.sg/legal/termsofuse.html'
  contact:
    email: onemap@sla.gov.sg
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: developers.onemap.sg
basePath: /
tags:
  - name: OneMap 2.0 API documentation
    description: All about the OneMap API
    externalDocs:
      description: Find out more
      url: 'https://docs.onemap.sg'
schemes:
  - https
paths:


  # Authorization
  /privateapi/auth/post/getToken:
    post:
      tags:
        - Authentication Service (POST)
      summary: Retrieve token key
      description: 'This API authenticates the user credentials and the service returns response in JSON format.'
      operationId: getToken
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: email
          in: formData
          required: true
          type: string
          description: Registered email entered by the user during the registration.
        - name: password
          in: formData
          type: string
          required: true
          description: Registered password entered by the user during the registration. 
      responses:
        '200':
          description: Successful
        '405':
          description: Invalid Input
        '500':
          description: Internal Server Error


  # Search
  /commonapi/search:
    get:
      tags:
        - OneMap REST APIs
      summary: Provide searching of address data for a given search value.
      description: 'The API provides searching of address data for a given search value. It returns search results with both latitude, longitude and x, y coordinates of the searched.'
      operationId: search
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
      parameters:
        - name: searchVal
          in: query
          required: true
          type: string
          default: revenue
          description: Keywords entered by user that is used to filter out the results.
        - name: returnGeom
          in: query
          required: true
          description: Checks if user wants to return the geometry.
          default: Y
        - name: getAddrDetails
          in: query
          required: true
          description: Checks if user wants to return address details for a point.
          default: Y
        - name: pageNum
          in: query
          description: Specifies the page to retrieve your search results from.
          required: false
      responses:
        '200':
          description: Successful
        '405':
          description: Invalid Input

      
  # Reverse Geocode (SVY21)
  /privateapi/commonsvc/revgeocodexy:     
    get:
      tags:
        - OneMap REST APIs
      summary: Retrieves a building address by specifying x, y coordinates
      description: 'The API retrieves a building address that lies within the defined buffer/radius of the specified x, y coordinates.'
      operationId: revgeocodexy
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: location
          in: query
          type: string
          description: X,Y Coordinates in SVY21 format
          default: 24291.97788882387,31373.0117224489
          required: true
        - name: token
          in: query
          type: string
          description: API token provided by the Authentication Service
          default:
          required: true
        - name: buffer
          description: Rounds up all building in a circumference from a point like a compass; and searches building addresses within the buffer/radius range.
          required: false
          type: integer
          format: int64
          in: query
          default: 10
        - name: addressType
          description: Provide user the selection of All of HDB properties within the buffer/radius. If HDB is chosen, this will filter to show all HDB-related buildings.
          required: false
          type: string
          in: query
          default: All
        - name: otherFeatures
          required: false
          description: Enables users to retrieve information on resvoirs, playgrounds, jetties and many more.
          default: N
          type: string
          in: query

      responses:
        '200':
          description: Successful

  #Reverse Geocode(WGS84)
  /privateapi/commonsvc/revgeocode:     
    get:
      tags:
        - OneMap REST APIs
      summary: Retrieves a building address by specifying latitude, longitude coordinates
      description: 'This API retrieves a building address that lies within the defined buffer/radius of the specified latitude, longitude coordinates. Road names are retuned within 20m for the specified coordinates.'
      operationId: revgeocode
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: location
          in: query
          type: string
          description: Latitude and longitude Coodinates in WGS84 format.
          default: 1.3,103.8
          required: true
        - name: token
          in: query
          type: string
          description: API token provided by the Authentication Service
          default:
          required: true
        - name: buffer
          description: Rounds up all building in a circumference from a point like a compass; and searches building addresses within the buffer/radius range.
          required: false
          type: integer
          format: int64
          in: query
          default: 10
        - name: addressType
          description: Provide user the selection of All of HDB properties within the buffer/radius. If HDB is chosen, this will filter to show all HDB-related buildings.
          required: false
          type: string
          in: query
          default: All
        - name: otherFeatures
          required: false
          description: Enables users to retrieve information on resvoirs, playgrounds, jetties and many more.
          default: N
          type: string
          in: query

      responses:
        '200':
          description: Successful

  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use        
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      deprecated: true
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the pet
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the pet
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ''
      operationId: placeOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the pet
          required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Order
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getOrderById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
externalDocs:
  description: Find out more about OneMap
  url: 'https://docs.onemap.sg'
